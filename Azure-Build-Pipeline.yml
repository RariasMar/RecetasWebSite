################################################# 
# Pipeline para compilar la soluci√≥n en DEV     #
# antes de hacer pull request a la rama master  #
#################################################

trigger:
  branches:
    include: [master]

stages:
  ###################################
  ## Fase de Build
  ###################################
  - stage: 'Build'
    displayName: 'Building Phase'
    jobs:
    - job:
      displayName: 'Build Job'
      pool: 
        vmImage: 'ubuntu-latest'
      
      variables:
        - group: 'Recetas VG'
        - name: SolutionPath
          value: '**/*.sln'
        - name: TestProject
          value: '**/*[Tt]est/*.csproj'
        - name: BuildConfiguration
          value: 'release'

      steps:
      - checkout: self
        clean: true
      
      # Restore Packages
      - task: DotNetCoreCLI@2
        displayName: 'Restore Packages'
        inputs:
          command: restore
          projects: $(SolutionPath)
      
      # Restore Tools
      - task: DotNetCoreCLI@2
        displayName: 'Restore .Net Core Tools'
        inputs:
          command: custom
          custom: tool
          arguments: restore
      
      # Prepare SonarCloud
      - task: SonarCloudPrepare@1
        displayName: 'Prepare Analysis on SonarCloud'
        inputs:
          SonarCloud: 'SonarCloud Connection'
          organization: rariasmar
          projectKey: rariasmar
          projectName: RecetasWebSite
          extraProperties: 'sonar.exclusions=**/wwwroot/lib/**'

      # Build Solution
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: $(SolutionPath)
          arguments: '--configuration $(BuildConfiguration)'
      
      # Set variable with CosmosDB connection string
      - script: 'echo ''##vso[task.setvariable variable=CONNECTIONSTRINGS__TABLESTORAGECS]$(TableStorageCS)'''
        displayName: 'Set Environment Variables'
      
      # Run Unit Tests
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: $(TestProject)
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
      
      # Execute Code Coverage
      - task: DotNetCoreCLI@2
        displayName: 'Create Code Coverage Report'
        inputs:
          command: custom
          custom: 'reportgenerator '
          arguments: '-reports:$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
      
      # Publish Code Coverage Results
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage Report'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml'
      
      # Run WhiteSource      
      - task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@20
        displayName: 'WhiteSource Bolt'
      
      # Run SonarCloud Analysis
      - task: SonarCloudAnalyze@1
        displayName: 'Run Code Analysis'

      # Publish SonarCloud Analysis
      - task: SonarCloudPublish@1
        displayName: 'Publish Quality Gate Result'
      
      # Generate Artifact
      - task: DotNetCoreCLI@2
        displayName: 'Publish Artifact'
        inputs:
          command: publish
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          modifyOutputPath: false
          #publishWebProjects: true
          #zipAfterPublish: true
      
      # Publish Artifact
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact in Azure Pipelines'
